README file for CASM - an HP Classic series calculator micro assembler
Copyright 1995 Eric L. Smith (eric@telebit.com)

-----------------------------------------------------------------------------

CASM is free software; you can redistribute it and/or modify it under the
terms of the GNU General Public License version 2 as published by the Free
Software Foundation.  Note that I am not granting permission to redistribute
or modify CASM under the terms of any later version of the General Public
License.

This program is distributed in the hope that it will be useful (or at least
amusing), but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
Public License for more details.

You should have received a copy of the GNU General Public License along with
this program (in the file "COPYING"); if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

-----------------------------------------------------------------------------

CASM is just a quick weekend hack, so don't expect too much.  I used flex and
yacc to build it; I once used bison in place of yacc so I think that works.
I parse the source file one line at a time because it simplifies making a
pretty listing file; unfortunately this means that lex can't be used in place
of flex without rewriting my YY_INPUT macro as an input function.

CASM requires a single command line argument to specify the source code file.

CASM currently writes a listing to standard out, and doesn't produce any
object file at all.  I'll probably have it generate Intel hex or Motorola
S-record format object files in the next version.

In the HP classic series processor, unlike modern microprocessors, various
instructions were interpreted by various chips.  The core processor consists
of the C&T (control and timing), A&R (arithmetic and registers) and the ROM
or QUAD ROM chips.  Additions chips may be present for data storage or program
storage.  Since different calculator models have different combinations of
these chips, some instructions are not available on all models.  For instance,
the "delayed select" instructions are probably not implemented in the HP-35
and HP-80 which use single ROMs, and the "search for label" instruction is
only available in the HP-65.

The design of the processor and the instruction set are described in detail
in United States patents 3,863,060 and 4,001,569.

CASM is supplied with twelve source code files containing the code from
United States patent number 4,009,379 titled "Portable Programmable Calculator
Displaying Absolute Line Number Addresses and Key Codes and Automatically
Altering Display Formats", granted February 22, 1977 to Bernard E. Musch of
Palo Alto, California, and assigned to the Hewlett-Packard Company of Palo
Alto, California.  This patent appears to cover the HP-55 calculator.  I don't
have an HP-55, so I can't verify that the code in the patent matches that in
the ROMs of an actual HP-55.  There are likely to be errors in my transcription
of the code, as the listing in my copy of the patent is hard to read.  Caveat
Emptor!

Various other United States patents assigned to Hewlett-Packard appear to
contain source listings of ROMs of other HP calculators:

	3,863,060:	HP-80
	4,001,569:	HP-45
	4,099,246:	HP-65 (only first half of ROM)
	4,291,385:	HP-65 (only first half of ROM)

I personally prefer my assembly source code to be in all lower case, so it
doesn't look like it is shouting at me.  All the source code I have typed in
from patents is in lower case, but CASM is case insensitive so if you prefer
emphatic source code be my guest.

The current version of CASM doesn't enforce the use of the appropriate form
of the "go to" instruction.  For instance, the plain "go to" should only be
used after instructions that can't set the carry flag.  The "then go to"
form should only be used after "if" instructions.  The "if no carry go to"
form should only be used after arithmetic instructions.

CASM does a better job of displaying the branch target addresses than the
HP assembler did.  It will actually show the correct target address based on
the delayed select instructions, unless the delay instruction is in the last
word of a page.  I have added a single directive ".rom" to the
assembler which can be used to provide the rom number.  This is vaguely
similar to the origin directive in a typical assembler, except that CASM
always start assembling code at location 0 of the selected ROM.
