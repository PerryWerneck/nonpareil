# SConscript for Nonpareil
# $Id$
# Copyright 2004, 2005 Eric L. Smith <eric@brouhaha.com>

# Nonpareil is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.  Note that I am not
# granting permission to redistribute or modify Nonpareil under the
# terms of any later version of the General Public License.

# Nonpareil is distributed in the hope that they will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program (in the file "COPYING"); if not, write to
# the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111, USA.

Import('env source_release_dir snapshot_dir')

#-----------------------------------------------------------------------------
# common
#-----------------------------------------------------------------------------

if env ['target'] == 'windows':
    pkg_config_cmd = 'PKG_CONFIG_PATH=/usr/local/gtkwin/lib/pkgconfig '
else:
    pkg_config_cmd = ''
pkg_config_cmd += 'pkg-config --cflags --libs '

env.Append (CPPPATH = ['.'])  # why is this necessary?
env.Append (CCFLAGS = ['-Wall'])
env.Append (YACCFLAGS = [ '-d', '-v' ])

if env ['debug'] :
	env.Append (CCFLAGS = ['-g'])
else:
	env.Append (CCFLAGS = ['-O2'])

if env ['target'] == 'windows':
	env.Replace (CC = '/usr/local/mingw/bin/i586-mingw32-gcc')
	env.Append (CCFLAGS = ['-mms-bitfields'])

common_srcs = Split ("""util.c arch.c""")
common_objs = [env.Object(src) for src in common_srcs]

common_dis_srcs = Split ("""dis_woodstock.c dis_nut.c""")
common_dis_objs = [env.Object(src) for src in common_dis_srcs];

state_io_srcs = Split ("""state_write.c state_read.c""")
state_io_objs = [env.Object(src) for src in state_io_srcs];
state_io_packages = "gtk+-2.0 gdk-2.0 gdk-pixbuf-2.0 glib-2.0 libxml-2.0"

release_env = env.Copy (CPPDEFINES = { 'NONPAREIL_RELEASE': env ['RELEASE']})
common_objs.append (release_env.Object ('release.c'))

env.ParseConfig(pkg_config_cmd + state_io_packages)

#-----------------------------------------------------------------------------
# uasm
#-----------------------------------------------------------------------------

uasm_srcs = Split ("""asm.c symtab.c
            	      asml.l asmy.y
                      casml.l casmy.y
                      wasml.l wasmy.y""")

uasm = env.Program (target = 'uasm',
                    source = uasm_srcs + common_objs)

import os.path

def AssembleEmitter (target, source, env):
    target.append (os.path.splitext (str (target [0])) [0] + '.lst')
    env.Depends (target, "$UASM")
    return (target, source)

Assemble = Builder (action = "$UASMCOM",
                    suffix = '.obj',
                    src_suffix = '.asm',
                    emitter = AssembleEmitter)

env.Append (BUILDERS = { 'Assemble': Assemble },
            UASM = uasm,
            UASMCOM = "$UASM $UASMFLAGS $SOURCE -o $TARGET -l ${TARGETS[1]}")


#-----------------------------------------------------------------------------
# nonpareil
#-----------------------------------------------------------------------------

nonpareil_env = env.Copy ()

nonpareil_srcs = Split ("""proc.c glib_async_queue_source.c
                           display.c keyboard.c slide_switch.c
			   kmll.l kmly.y kml.c
                           platform.c model.c
                           proc_classic.c
                           proc_woodstock.c
                           proc_nut.c coconut_lcd.c voyager_lcd.c""")

nonpareil_csim_srcs = Split ("""csim.c""")

nonpareil_debugger_gui_srcs = Split ("""debugger_gui.c""")

nonpareil_debugger_cli_srcs = Split ("""debugger_cli.c""")

nonpareil_packages = "gtk+-2.0 gdk-2.0 gdk-pixbuf-2.0 glib-2.0 gthread-2.0"

nonpareil_objs = []

if env ['has_debugger_gui'] or env ['has_debugger_cli']:
    nonpareil_env.Append (CPPDEFINES = {'HAS_DEBUGGER': 1})

if env ['has_debugger_cli']:
    nonpareil_packages += ' vte'
    nonpareil_env.Append (LIBS = 'util')  # for PTY support

if env ['has_debugger_gui']:
    nonpareil_objs.append (nonpareil_env.Object (nonpareil_debugger_gui_srcs))

nonpareil_env.ParseConfig(pkg_config_cmd + nonpareil_packages)

csim_env = nonpareil_env.Copy ()
csim_env.Append (CPPDEFINES = {'DEFAULT_PATH': env ['prefix'] + "/lib/nonpareil"})

if env ['target'] == 'windows':
    csim_env.Append (CPPDEFINES = {'SHAPE_DEFAULT': "false"})

if env ['has_debugger_gui']:
    csim_env.Append (CPPDEFINES = {'HAS_DEBUGGER_GUI': 1})

if env ['has_debugger_cli']:
    csim_env.Append (CPPDEFINES = {'HAS_DEBUGGER_CLI': 1})
    debugger_cli_env = csim_env.Copy ()
    if env ['use_tcl']:
        debugger_cli_env.Append (CPPDEFINES = {'USE_TCL': 1})
        nonpareil_env.Append (LIBS = 'tcl')
    if env ['use_readline']:
        debugger_cli_env.Append (CPPDEFINES = {'USE_READLINE': 1})
        nonpareil_env.Append (LIBS = 'readline')
    nonpareil_objs.append (debugger_cli_env.Object (nonpareil_debugger_cli_srcs))

for src in nonpareil_csim_srcs:
    nonpareil_objs.append (csim_env.Object (src))

for src in nonpareil_srcs:
    nonpareil_objs.append (nonpareil_env.Object (src))

nonpareil = nonpareil_env.Program (target = 'nonpareil',
                                   source = common_objs + state_io_objs + common_dis_objs + nonpareil_objs)

#-----------------------------------------------------------------------------
# udis
#-----------------------------------------------------------------------------

udis_env = env.Copy ()

udis_srcs = Split ("""dis.c""")

udis = udis_env.Program (target = 'udis',
                         source = common_objs + common_dis_objs + udis_srcs)

#-----------------------------------------------------------------------------
# nsim_conv
#-----------------------------------------------------------------------------

nsim_conv_env = env.Copy ()

nsim_conv_srcs = Split ("""nsim_conv.c
	                   state_read_nsim.c state_write_nsim.c""")

# nsim_conv_packages = "libxml-2.0"
# nsim_conv_env.ParseConfig(pkg_config_cmd + nsim_conv_packages)

nsim_conv = nsim_conv_env.Program (target = 'nsim_conv',
                                   source = common_objs + state_io_objs + nsim_conv_srcs)

#-----------------------------------------------------------------------------
# default targets
#-----------------------------------------------------------------------------

Default ([nonpareil, uasm])
# omit udis, nsim_conv for now

#-----------------------------------------------------------------------------
# install
#-----------------------------------------------------------------------------

#if env ['target'] == 'windows':
#    env.Alias (target = 'install',
#               source = env.Install (dir = env ['wdestdir'],
#                                     source = [uasm, nonpareil]))
#else:
env.Alias (target = 'install',
           source = env.Install (dir = env ['destdir'] + "/bin",
                                 source = [uasm, nonpareil]))

#-----------------------------------------------------------------------------
# source tarball
#-----------------------------------------------------------------------------

headers = Split ("""util.h
                    arch.h model.h platform.h kml.h
                    proc.h proc_int.h glib_async_queue_source.h
                    proc_classic.h proc_nut.h proc_woodstock.h
                    state_io.h
                    debugger_gui.h debugger_cli.h
                    dis_woodstock.h dis_nut.h
                    display.h coconut_lcd.h voyager_lcd.h
                    display_gtk.h keyboard.h slide_switch.h
                    asm.h symtab.h
                    nsim_conv.h""")

misc = Split ("""SConscript ChangeLog release.c""")

dist_files = (misc + headers + common_srcs + common_dis_srcs +
              state_io_srcs + uasm_srcs +
              nonpareil_srcs + nonpareil_csim_srcs +
              nonpareil_debugger_gui_srcs +
              nonpareil_debugger_cli_srcs)

env.Distribute (source_release_dir, dist_files)

env.Distribute (snapshot_dir, dist_files)
