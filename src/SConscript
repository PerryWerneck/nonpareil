# SConscript for Nonpareil
# $Id$
# Copyright 2004, 2005 Eric L. Smith <eric@brouhaha.com>

# Nonpareil is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.  Note that I am not
# granting permission to redistribute or modify Nonpareil under the
# terms of any later version of the General Public License.

# Nonpareil is distributed in the hope that they will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program (in the file "COPYING"); if not, write to
# the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111, USA.

Import('env')

#-----------------------------------------------------------------------------
# common
#-----------------------------------------------------------------------------

if env ['target'] == 'windows':
    pkg_config_cmd = 'PKG_CONFIG_PATH=/usr/local/gtkwin/lib/pkgconfig '
else:
    pkg_config_cmd = ''
pkg_config_cmd += 'pkg-config --cflags --libs '

env.Append (CPPPATH = ['.'])  # why is this necessary?
env.Append (CCFLAGS = ['-Wall'])
env.Append (YACCFLAGS = [ '-d', '-v' ])

if env ['debug'] :
	env.Append (CCFLAGS = ['-g'])
else:
	env.Append (CCFLAGS = ['-O2'])

if env ['target'] == 'windows':
	env.Replace (CC = '/usr/local/mingw/bin/i586-mingw32-gcc')
	env.Append (CCFLAGS = ['-mms-bitfields'])

common_srcs = Split ("""util.c arch.c""")
common_objs = []
for src in common_srcs:
    common_objs.append (env.Object (src))

common_dis_srcs = Split ("""dis_woodstock.c dis_nut.c""")
common_dis_objs = [];
for src in common_dis_srcs:
    common_dis_objs.append (env.Object (src))

state_io_srcs = Split ("""state_write.c""")  # state_read.c 
state_io_objs = [];
for src in state_io_srcs:
    state_io_objs.append (env.Object (src))
state_io_packages = "libxml-2.0"

release_env = env.Copy (CPPDEFINES = { 'NONPAREIL_RELEASE': env ['RELEASE']})
common_objs.append (release_env.Object ('release.c'))

env.ParseConfig(pkg_config_cmd + state_io_packages)

#-----------------------------------------------------------------------------
# uasm
#-----------------------------------------------------------------------------

uasm_env = env.Copy ()

uasm_srcs = Split ("""asm.c symtab.c
            	      asml.l asmy.y
                      casml.l casmy.y
                      wasml.l wasmy.y""")

uasm = uasm_env.Program (target = 'uasm',
                         source = uasm_srcs + common_objs)

#-----------------------------------------------------------------------------
# nonpareil
#-----------------------------------------------------------------------------

nonpareil_env = env.Copy ()

nonpareil_srcs = Split ("""proc.c
			   kmll.l kmly.y kml.c
                           platform.c model.c
                           proc_classic.c
                           proc_woodstock.c
                           proc_nut.c coconut_lcd.c voyager_lcd.c""")

nonpareil_packages = "gtk+-2.0 gdk-2.0 gdk-pixbuf-2.0 glib-2.0 gthread-2.0"

if env ['has_debugger_cli']:
    nonpareil_packages += ' vte'

if env ['has_debugger']:
    nonpareil_env.Append (CPPDEFINES = {'HAS_DEBUGGER': 1})

nonpareil_env.ParseConfig(pkg_config_cmd + nonpareil_packages)

csim_env = nonpareil_env.Copy ()
csim_env.Append (CPPDEFINES = {'DEFAULT_PATH': env ['prefix'] + "/lib/nonpareil"})

if env ['target'] == 'windows':
    csim_env.Append (CPPDEFINES = {'SHAPE_DEFAULT': "false"})

nonpareil_objs = []

if env ['has_debugger_cli']:
    csim_env.Append (CPPDEFINES = {'HAS_DEBUGGER_CLI': 1})
    debugger_env = csim_env.Copy ()
    nonpareil_env.Append (LIBS = 'util')  # for PTY support
    if env ['use_tcl']:
        debugger_env.Append (CPPDEFINES = {'USE_TCL': 1})
        nonpareil_env.Append (LIBS = 'tcl')
    if env ['use_readline']:
        debugger_env.Append (CPPDEFINES = {'USE_READLINE': 1})
        nonpareil_env.Append (LIBS = 'readline')
    nonpareil_objs.append (debugger_env.Object ('debugger.c'))

nonpareil_objs.append (csim_env.Object ('csim.c'))
nonpareil_objs.append (csim_env.Object ('display.c'))
nonpareil_objs.append (csim_env.Object ('glib_async_queue_source.c'))

for src in nonpareil_srcs:
    nonpareil_objs.append (nonpareil_env.Object (src))

nonpareil = nonpareil_env.Program (target = 'nonpareil',
                                   source = common_objs + state_io_objs + common_dis_objs + nonpareil_objs)

#-----------------------------------------------------------------------------
# udis
#-----------------------------------------------------------------------------

udis_env = env.Copy ()

udis_srcs = Split ("""dis.c""")

udis = udis_env.Program (target = 'udis',
                         source = common_objs + common_dis_objs + udis_srcs)

#-----------------------------------------------------------------------------
# nsim_conv
#-----------------------------------------------------------------------------

nsim_conv_env = env.Copy ()

nsim_conv_srcs = Split ("""nsim_conv.c
	                   state_read_nsim.c state_write_nsim.c""")

# nsim_conv_packages = "libxml-2.0"
# nsim_conv_env.ParseConfig(pkg_config_cmd + nsim_conv_packages)

nsim_conv = nsim_conv_env.Program (target = 'nsim_conv',
                                   source = common_objs + state_io_objs + nsim_conv_srcs)

#-----------------------------------------------------------------------------
# default targets
#-----------------------------------------------------------------------------

Default ([nonpareil, uasm])
# omit udis, nsim_conv for now

#-----------------------------------------------------------------------------
# install
#-----------------------------------------------------------------------------

#if env ['target'] == 'windows':
#    env.Alias (target = 'install',
#               source = env.Install (dir = env ['wprefix'],
#                                     source = [uasm, nonpareil]))
#else:
env.Alias (target = 'install',
           source = env.Install (dir = env ['prefix'] + "/bin",
                                 source = [uasm, nonpareil]))
